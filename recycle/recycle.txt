import random
import string
from datetime import datetime, date
import psycopg2  # Import the psycopg2 library

# Database connection parameters
db_params = {
		"dbname":   "dealer",
		"user":     "postgres",
		"password": "mypgdbpass",
		"host":     "96.73.17.121",
		"port":     "5432"
}


# Function to execute SQL queries
def execute_query(query):
	connection = psycopg2.connect(**db_params)
	cursor = connection.cursor()
	cursor.execute(query)
	connection.commit()
	cursor.close()
	connection.close()


def generate_random_name():
	first_names = ["John", "Jane", "Michael", "Emily", "William", "Olivia", "James", "Sophia", "Daniel", "Ava"]
	last_names = ["Smith", "Johnson", "Williams", "Jones", "Brown", "Davis", "Miller", "Wilson", "Moore", "Taylor"]
	return f"{random.choice(first_names)} {random.choice(last_names)}"


def generate_random_email():
	domains = ["gmail.com", "yahoo.com", "hotmail.com", "outlook.com", "example.com"]
	name = generate_random_name().replace(" ", "").lower()
	domain = random.choice(domains)
	return f"{name}@{domain}"


def generate_random_phone_number():
	area_code = ''.join(random.choices(string.digits, k=3))
	middle_digits = ''.join(random.choices(string.digits, k=3))
	last_digits = ''.join(random.choices(string.digits, k=4))
	return f"({area_code}) {middle_digits}-{last_digits}"


def generate_random_location():
	cities = ["New York", "Los Angeles", "Chicago", "Houston", "Miami", "Seattle", "Boston", "Atlanta", "Denver",
			  "Dallas"]
	return f"{random.choice(cities)}, {random.choice(['CA', 'NY', 'IL', 'TX', 'FL', 'WA', 'MA', 'GA', 'CO', 'TX'])}"


def generate_random_vin():
	letters = string.ascii_uppercase
	digits = string.digits
	vin = ''.join(random.choice(letters + digits) for _ in range(17))
	return vin


# Generate INSERT statements for dealerships
num_dealerships = 5
num_salespersons = 10
num_customers = 15
num_cars = 20
num_sales = 50

generated_emails = set()
generated_phone_numbers = set()

try:
	# Create the "dealership" table
	create_dealership_table = '''
    CREATE TABLE IF NOT EXISTS dealer.public.dealership
    (
        "dealership_id" SERIAL PRIMARY KEY,
        "name" VARCHAR(30),
        "location" VARCHAR(100)
    );
    '''
	execute_query(create_dealership_table)
	print("Dealership table created successfully.")

	for _ in range(num_dealerships):
		name = f"Dealer {random.randint(100, 999)}"
		location = generate_random_location()

		insert_dealership = (f"INSERT INTO dealer.public.dealership "
							 f"(name, location) "
							 f"VALUES('{name}', '{location}')")
		execute_query(insert_dealership)
		print("Inserted dealership:", insert_dealership)

	create_salespersons_table = '''
	CREATE TABLE dealer.public.salesperson
	(
		"salesperson_id" SERIAL PRIMARY KEY,
		"salesperson_name" VARCHAR(100) NOT NULL,
		"salesperson_email" VARCHAR(100) UNIQUE NOT NULL,
		"salesperson_phone_number" VARCHAR(20) NOT NULL,
		"created_at" timestamp DEFAULT (CURRENT_TIMESTAMP)
	);
	'''

	execute_query(create_salespersons_table)
	print("Salespersons table created successfully.")

	for _ in range(num_salespersons):
		name = generate_random_name()
		email = generate_random_email()

		# Ensure unique email address
		while email in generated_emails:
			email = generate_random_email()

		generated_emails.add(email)  # Add the email to the set

		phone = generate_random_phone_number()

		insert_salesperson = (
				f"INSERT INTO dealer.public.salesperson "
				f"(salesperson_name, salesperson_email, salesperson_phone_number, created_at) "
				f"VALUES('{name}', '{email}', '{phone}', '{datetime.now()}')"
		)
		execute_query(insert_salesperson)
		print(insert_salesperson)

	create_customer_table = '''
	CREATE TABLE "customer"
	(
		"customer_id" SERIAL PRIMARY KEY,
		"first_name" VARCHAR(50) NOT NULL,
		"last_name" VARCHAR(50) NOT NULL,
		"email" VARCHAR(100) UNIQUE NOT NULL,
		"phone_number" VARCHAR(20) NOT NULL,
		"date_of_birth" DATE NOT NULL,
		"created_at" timestamp DEFAULT (CURRENT_TIMESTAMP)
	);
	'''
	execute_query(create_customer_table)
	print("Service table created successfully.")
	for _ in range(num_customers):
		first_name = generate_random_name().split()[0]
		last_name = generate_random_name().split()[1]
		email = generate_random_email()

		# Ensure unique email address
		while email in generated_emails:
			email = generate_random_email()

		generated_emails.add(email)

		phone_number = generate_random_phone_number()

		# Ensure unique phone number
		while phone_number in generated_phone_numbers:
			phone_number = generate_random_phone_number()

		generated_phone_numbers.add(phone_number)

		date_of_birth = date(random.randint(1950, 2005), random.randint(1, 12), random.randint(1, 28))

		insert_customer = (
				f"INSERT INTO dealer.public.customer "
				f"(first_name, last_name, email, phone_number, date_of_birth, created_at) "
				f"VALUES('{first_name}', '{last_name}', '{email}', '{phone_number}', '{date_of_birth}', '{datetime.now()}')"
		)

		execute_query(insert_customer)  # Use the retry function
		print(insert_customer)

	create_service_table = '''
    CREATE TABLE IF NOT EXISTS dealer.public.service
    (
        service_id SERIAL PRIMARY KEY,
        car_id INTEGER,
        service_name VARCHAR(100) NOT NULL,
        description TEXT,
        customer_id INTEGER,
        service_date DATE NOT NULL,
        service_description TEXT NOT NULL,
        service_cost DECIMAL(10, 2) NOT NULL,
        created_at timestamp DEFAULT (CURRENT_TIMESTAMP)
    );
    '''
	execute_query(create_service_table)
	print("Service table created successfully.")

	# Create the "purchase" table
	create_purchase_table = '''
	CREATE TABLE IF NOT EXISTS dealer.public.purchase
	(
		purchase_id SERIAL PRIMARY KEY,
		customer_id INT NOT NULL,
		car_id INT NOT NULL,
		purchase_date timestamp DEFAULT (CURRENT_TIMESTAMP)
	);
	'''
	execute_query(create_purchase_table)
	print("Purchase table created successfully.")

	for _ in range(num_cars):
		make = random.choice(
			["Toyota", "Honda", "Ford", "Chevrolet", "Nissan", "BMW", "Mercedes-Benz", "Audi", "Subaru"])
		model = f"{random.randint(1, 9)} Series"
		year = random.randint(2000, 2023)
		customer_id = random.randint(1, num_customers)  # Corrected customer ID range
		price = round(random.uniform(10000, 50000), 2)
		condition = random.choice(["New", "Used"])
		dealership_id = random.randint(1, num_dealerships)  # Assuming dealership IDs are within this range
		vin = generate_random_vin()

		insert_car = (
				f"INSERT INTO dealer.public.car "
				f"(make, model, year, customer_id, price, condition, dealership_id, vin) "
				f"VALUES('{make}', '{model}', {year}, {customer_id}, {price}, '{condition}', {dealership_id}, '{vin}')"
		)
		execute_query(insert_car)
		print(insert_car)

		num_services = random.randint(1, 5)
		for _ in range(num_services):
			service_name = random.choice(["Oil Change", "Tire Rotation", "Brake Inspection", "Coolant Flush"])
			description = "Service description"
			customer_id = random.randint(1, num_customers)
			service_date = date(random.randint(2000, 2023), random.randint(1, 12), random.randint(1, 28))
			service_description = "Detailed service description"
			service_cost = round(random.uniform(50, 300), 2)

			insert_service = (
				f"INSERT INTO dealer.public.service "
				f"(car_id, service_name, description, customer_id, service_date, service_description, service_cost) "
				f"VALUES({car_id}, '{service_name}', '{description}', {customer_id}, '{service_date}', '{service_description}', {service_cost})"
		)
			execute_query(insert_service)
			print(insert_service)

		# Generate INSERT statements for purchases
		customer_id = random.randint(1, num_customers)
		purchase_date = datetime.now()

		insert_purchase = (
				f"INSERT INTO dealer.public.purchase "
				f"(customer_id, car_id, purchase_date) "
				f"VALUES({customer_id}, {car_id}, '{purchase_date}')"
		)
		execute_query(insert_purchase)
		print(insert_purchase)

	print("Finished inserting data.")
except psycopg2.errors.UniqueViolation as e:
	print(f"Error: {e}")
	print("Skipping duplicate entry and continuing...")
except Exception as e:
	print(f"An error occurred while inserting data: {str(e)}")